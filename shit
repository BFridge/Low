 本文所设计的方案结合了Android应用自动化测试技术与应用程序行为分析技术,实现了一种自动化测试系统。
 应用程序行为的捕捉主要集中在框架层。





【动态分析的优势】：


静态分析只能检测出特征库中已有的恶意代码样本，无法检测未知的恶意代码，同时静态分析很难
应对代码混淆、反射、加密等情况，针对静态分析的缺点，本文设计实现了动态分析。【一种针对Android平台恶意代码的检测方法及系统实现】


动态分析以Android模拟器为运行环境，将APK文件安装到模拟器中并运行，同时监控APK文件运行时的行为，并
与恶意行为模式进行匹配，判断是否为恶意代码。


【恶意行为动机】
随着移动互联网的发展，恶意软件的动机也在不断变化。最初，恶意软件开发者开
发恶意软件只是单纯地展现自己的技术，并用此获得一定的知名度；然而，随着时间的
推移，恶意软件开发者越来越看重恶意软件背后隐藏的钱财利益。相比于传统的个人
PC端，智能手机终端存有大量的个人隐私信息，同时保留有手机的相关特性，这些隐
私信息包括联系人、收发短信记录、通话记录、设备的位置定位和MAC地址等信息。
恶意开发者通过对隐私数据信息的搜集可以挖掘出有价值的情报，并以此谋取收益，这
既会导致用户的隐私信息被非法窃取，还可能危害到用户的利益。
根据恶意软件的动机，把当前Android恶意软件主要分为以下几种类型【24】：
a)服务提供商(Service Provider，简称SP)吸费：服务提供商主要负责直接给移
动互联网内容提供相关的应用服务，一般通过SMS短信、WAP网络等方式给用户提供
有偿信息服务。如向SP号码“1069999390”发送内容“2”，用户便会扣除两元话费。
用户使用服务花费的钱由运营商收取，并在随后与服务提供商分红。

正是利用服务提供商能快速方便地获得用户话费的特点，Android恶意软件开发者
与拥有移动网增值业务经营许可证的公司进行联合，利用恶意软件便可在未获得用户允
许的情况下在后台自动为用户定制某些服务，发送相关的定制服务短信，以此骗取服务
费用。

b)用户隐私窃取：用户的隐私主要包括收发的SMS内容、电话记录、通讯录，设
备当前的所在位置以及设备的MAC地址等，这些隐私数据也引起了恶意软件开发者的
强烈兴趣，他们纷纷采取各种手段窃取大量的用户信息并利用这些信息谋取利益。隐私
窃取类的恶意软件攻击步骤如图2．5所示：

c)恶意推广：恶意推广类恶意软件通常会私自下载并安装推广软件，且这一行为通
常不会被用户发现。恶意软件开发者一般把将病毒化的广告SDK嵌入到正常的应用软
件中。随后又出现了推广广告类的手机病毒变种，会在用户完全不知情的情况下私自启
动恶意服务，联网下载推广软件，该行为会耗费大量的网络流量，给用户造成一定程度
的经济利益损失。


【Low所监控的项目】
(2)网络的输入输出数据；
(3)文件的读写操作；(4)DexClassLoader加载的类以及使用反射加载的类；(5)使用的权限；(6)加密时用到的api；(7)通
过网络，文件和短信泄露的信息；(8)广播接收列表；(9)发送短信和打电话。
(10)视频录制以及相机调用
(11)运行时使用Linux Shell命令
(12)网络连接管理
(13)地理位置获取
(14)调用蓝牙
(15)BroadCast
(16)获取各种系统服务


【数据集】：

数据集主要由三个信息主体构成，调用方法的时间，所调用方法的名称，调用方法的参数。

数据集的主要信息载体在log文件中。每一个被测试的apk都有一个独立的log文件。每一次测试都会删除掉原文件内容，重新写入。

产生的数据集会分为两组：

恶意app以及普通app

【Activity 安全】
Activity组件是用户唯一能够看见的组件，作为软件所有功能的显示载体，其安全
问题是最应该受关注的。Activity安全首先要讨论的是访问权限控制，正如Android开
发文档中所说的，Android系统组件在指定Intent过滤器后，默认是可以被外部程序访
问的。可以被外部访问就意味着可能被其他程序用来进行串谋攻击。
除了权限攻击外，Activity还有一个安全问题，那就是Activity劫持。Activity劫持
方法最早是在2011年的一次安全大会上由SpiderLabs安全小组公布的，从受影响的角
度来看，Activity劫持技术属于用户层的安全，开发者是无法控制的。它的原理如下：
当用户安装了带有Activity劫持功能的恶意程序后，恶意程序会遍历系统中运行的程序，
当检测到需要劫持的Activity(通常是网银或其它网络程序的登录页面)在前台运行时，
恶意软件会启动一个带FLAG ACTIVITY NEW TASK标志的钓鱼式Activity覆盖正常
的Activity，从而欺骗用户输入用户名或密码信息，当用户输入完信息后，恶意软件会
将信息发送到指定的网址或邮箱，然后切换到正常的Activity中去。Activity劫持不需
要在Manifest文件中声明任何权限就可以实现，一般的防病毒软件无法检测，手机用户
更是防不胜防，再加上Activity劫持对于用户操作来说几乎是透明的，危害性可想而知。

【Service安全】
Service是系统中负责相关耗时操作的进程组件。与其它的Android组件一样，当声
明Service时指定了Intent过滤器，该Service默认可以被外部访问。可以访问的方法有：
startService0：启动服务，可以被用来实现串谋攻击；
bindService0：绑定服务，可以被用来实现串谋攻击；
stopService0：停止服务，对程序功能进行恶意破坏。
而对于恶意的stopService0，它可以破解程序的执行环境，直接影响到程序的正常
运行。要想杜绝Service组件被人恶意启动或停止，就需要使用Android系统的权限机
制来对调用者进行控制。


【BroadCastReceiver安全】

Broadcast Receiver主要负责对接收到的广播进行相关处理。广播接受者的安全分为
发送安全与接收安全两方面。
Android系统中的广播有个特点：多数情况下广播是使用Action来标识其用途，然
后由sendBroadcast0方法发出的，系统中所有响应Action的广播接收者都能够接收到该
广播。在AndroidManifest．xml文件中，组件的Action是通过Intent过滤器来设置的，使
用了Intent过滤器的Android组件默认情况下都是可以被外部访问的。
Android系统提供了两种广播发送方法， 分别是sendBroadcast0与
sendOrderedBroadcast()。SendBroadcast0用于发送无序广播，无序广播能够被所有的广
播接收者接收，且不能被abortBroadcast0中止，sendOrderedBroadcast0用于发送有序广
播，有序广播被优先级高的广播接收者接收，然后依次向下传递，优先极高的广播接收
者可以篡改广播，或者调用abortBroadcast()终止广播。



【Content Provider安全】
Content Provider负责传输程序之间的数据。该组件提供一种进程数据间共享的机
制，允许对应用的某些私有数据进行访问，该机制主要利用了数据的存储和查询接口。
例如系统中通讯录、短信息都是通过Content Provider来访问的。
Content Provider提供了insert、delete、update、select等操作，其中执行查询操作时
会进行读权限检查，其它的操作会进行写权限检查，权限检查失败时会抛出安全异常。
对于很多开发人员来说，在声明Content Provider时几乎从来不使用这两个权限，这就
导致了串谋攻击发生的可能。部分网络软件开发商使用Content Provider来实现软件登
陆、用户密码修改等敏感度极高的操作，然而声明的Content Provider却没有权限控制，
这使得一些恶意软件无需任何权限也能获取用户的敏感信息。


